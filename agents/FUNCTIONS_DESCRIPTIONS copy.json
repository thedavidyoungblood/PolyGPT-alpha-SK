[
    {
        "name": "task_planner",
        "description": "task planner to: 1. create a plan for finishing a task, 2. verify the execution result of the plan and potentially suggest new plan.",
        "parameters": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "question to ask planner. Make sure the question include enough context, such as the code and the execution result. The planner does not know the conversation between you and the user, unless you share the conversation with the planner."
                }
            },
            "required": [
                "message"
            ]
        }
    },
    {
        "name": "search",
        "description": "Searches for a query on google.serper.dev",
        "parameters": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "description": "Search query"
                }
            },
            "required": [
                "query"
            ]
        }
    },
    {
        "name": "scrape_website",
        "description": "Scrapes and summarizes website content, loads the summarized text as documents, creates a Neo4j vector store from the documents, and performs a similarity search with the summarized text.",
        "parameters": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "URL of the website to scrape."
                },
                "objective": {
                    "type": "string",
                    "description": "Objective for summary."
                }
            },
            "required": [
                "url",
                "objective"
            ]
        }
    },
    {
        "name": "summary",
        "description": "Generates a concise summary",
        "parameters": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "description": "Content to summarize"
                },
                "objective": {
                    "type": "string",
                    "description": "Objective for summary"
                }
            },
            "required": [
                "content",
                "objective"
            ]
        }
    }, 
    {
        "name": "git_repo_scraper",
        "description": "Clones a Git repository, loads files from it, saves the files to a Neo4j database, and then deletes the cloned repository folder.",
        "parameters": {
            "type": "object",
            "properties": {
                "repo_url": {
                    "type": "string",
                    "description": "URL of the Git repository to clone."
                },
                "branch": {
                    "type": "string",
                    "description": "Branch of the repository to clone. Default is 'main'."
                },
                "repo_path": {
                    "type": "string",
                    "description": "Path to store the cloned repository. Default is './repo'."
                },
                "file_filter": {
                    "type": "string",
                    "description": "A filter function to select specific files from the repository. Default is None."
                }
            },
            "required": [
                "repo_url"
            ]
        }
    }, 
    {
        "name": "query_knowledge_graph",
        "description": "Queries a Neo4j knowledge graph using a RAG application. It takes a question as input and returns an answer from the knowledge graph.",
        "parameters": {
            "type": "object",
            "properties": {
                "question": {
                    "type": "string",
                    "description": "The question to be queried against the knowledge graph."
                }
            },
            "required": [
                "question"
            ]
        }
    },
    {
        "name": "retrieve_content",
        "description": "retrieve content for code generation and question answering.",
        "parameters": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Refined message which keeps the original meaning and can be used to retrieve content for code generation and question answering."
                }
            },
            "required": ["message"]
        }
    }
]